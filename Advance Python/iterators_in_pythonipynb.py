# -*- coding: utf-8 -*-
"""Iterators in Pythonipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HISkVLRLgjqE8tIpLxz8Dva429PBBo7Z

# Iterators

-> iterators are objects that allow you to traverse through all the elements of a collection (like a list, tuple, or dictionary) one by one, without needing to know the underlying structure of the collection.

-> Iterators allows efficient looping and memory management. Iterators provide a way to access elements of a collection sequentially without exposing the underlying structure.

**Key Concepts of Iterators**

1.) Iterable: An object is considered iterable if you can get an iterator from it. This means the object implements the __iter__() method that returns an iterator.

2.) Iterator: An object is an iterator if it implements the __next__() method, which returns the next item in the sequence. It also has the __iter__() method, which returns the iterator object itself.

**How Iterators Work**

An iterator produces a sequence of values, one at a time, when you call next() on it.

When there are no more items left to iterate, the iterator raises a StopIteration exception to signal the end of the iteration.
"""

ls = [1,2,3,4,5,6]

for i in ls:
    print(i)

type(ls)

print(ls)

# iterator

iterator= iter(ls)
print(iterator)

# it will not give us any element unless and until
# we iterate through that particular element

# In order to iterator thorugh all the elements
# we will use next() method

next(iterator)

next(iterator)

next(iterator)

next(iterator)

next(iterator)

next(iterator)

#next(iterator)
#StopIteration:
# no elements left.

iterator = iter(ls)

try:
    print(next(iterator))
except:
    print("There are no elements left in the iterator.")

# string iterator

my_string="Malav"
iterator=iter(my_string)

try:
    print(next(iterator))
except:
    print("There are no elements left in the iterator.")