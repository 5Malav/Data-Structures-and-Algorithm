# -*- coding: utf-8 -*-
"""Dictionary Data Struture.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKmtZLcOeXdpvjEvTUFcmeON9xregM_s

# Dictionary

A dictionary is a collection which is ordered , changeable and indexed.

The data is organized using key and value pairs.

Here we would retrieve the data using the key.

So, it will be like mydict["key"]=value

**Create a Dictionary**

A dictinary is a mutable collection of key value pairs where each unique key maps to the value.


Dictionaries are implemented using hash table which provide fast access to values based on their keys.
"""

# using DICT constructor

my_dict=dict()
print(my_dict)

# empty dictionary


my_dict2={}
print(my_dict2)

"""

Time Complexity:-

Now the time complexity for creating an empty dictionary using curly braces {}
or dict contstuctor is going to be O(1).


Space Complexity:-

Space complexity will be also O(1) as the dictionary is empty and the only
memory for the intial hash table structure is allocated. So, that's why the space
complexity is O(1).

"""

english_to_spanish = dict(one = "uno",two="dos",three="tres")

print(english_to_spanish)

english_to_span = {"one" :"uno","two":"dos","three":"tres"}

print(english_to_span)

"""

Time Complexity:-

The time complexity is going to be for both cases O(n) because each key and value
pair needs to be inserted in the dictionary and this will take some time.

Space Complexity:-

Space complexity is also O(n) because the dictionary needs to store key and value
pair in the memory.


"""

# Another way of creating a dictionary with the DICT constuctor using the list
# of tuples,

eng_to_span = [("one","uno"),("two","dos"),("three","tres")]

dic = dict(eng_to_span)
print(dic)

# time complexity = O(n)
# space complexity = O(n)

"""**Dictionary in Memory**

Dictinaries are indexed by keys and the can be seen as associative arrays.

Python Dictionaries are implemented using hash tables.

It's an array whose indexes are obtaining using a hash functions on the keys.


The goal of hash function is distribute the key evenly in the array.

A hash table is a way of doing key value lookups.

We can store vlaue in an array, then use a hash function to find the index
of the array cell that corresponds to your key value pair.

A hash function maps a key to a hash value and then an index of the array.


Based on key a hash function calculates the index.

Then key and pairs is located in an array in the memory. This includes
 the perfomance of dictionaries.

SO there are 3 mains elements in hash tables.

The keys, the array and the hash function. A good hash function minimizes
the number of collusions.

What is collusions ?

Different keys have the same hash value and this results the same index.

Python does not have this kind of hash function that can eliminate all collusions.

# Insert / Update an element in a Dictionary
"""

# Update element

my_dict = {"name":"Maya","age":59}

print(my_dict)

my_dict['age'] = 27

print(" ")

print(my_dict)

"""

Time Complexity:-

In this case we are just accessing the straight away to the pair and
changing the value.

We don't do any looping or any searching operations over here.

Space Complexity:-

Space complexity is also O(1). Because here an extra memoery is not required.

"""

my_dict = {"name":"Maya","age":59}

print(my_dict)

my_dict['home'] = "Apartment"

print(" ")

print(my_dict)

"""Time Complexity:-

Time complexity will be O(1). Because here we are just adding key and value.

Space Complexity:-

For adding pairs to the dictionary is amortized O(1).

It changes to O(n) when underlying data structure needs to grow or shrink.

As the later only happend infrequently so we use amortized word.

# Travere through a Dictionary
"""

# Traversing means visiting all pairs of a dictionary one by one

my_dict = {"name":"Maya","age":65,"address":"India"}

print(my_dict)

def traverseDict(dict):

    for key in dict:
        print(key,dict[key])

traverseDict(my_dict)

"""Time Complexity:-

print(key,dict[key]) :- O(1)

we have a key and we are accesing value so its time complexity is O(1).


for key in dict:
We know that looping through any given collection is O(n) time complexity,
because here we have to visit all elements one by one.

total = O(1) + O(n) = O(n) time complexity

Space Complexity:-

Space complexity will be O(1) because here extra memory is not required.

we are just visiting elements and we are not even stroing any element in a
temoporary variable or something else.

# Search for an element in a  Dictionary

There are many algorithms for searching a given value in the dictionary.

For example, linear search.

The logic behind linear search is based on traversing a dictionary.
This means that we have to visit each and every elements of dictionary and check
if this value is we are looking for.
"""

my_dict= {"Name :- ":"Maya","Age :-":64,"Address :-":"India"}
print(my_dict)



def search_dict(dict,value):

    for key in dict:
        if dict[key]==value:
            return key,value

    return "The values does not exist"


print(" ")

print(search_dict(my_dict,64))

print(" ")

print(search_dict(my_dict,"Canada"))

"""Time Complexity:-

return key,value : - O(1) time complexity.

if dict[key]==value: -- Accesing any pair valuy thorough key is O(1) time complexity

for key in dict: -- Traversing through dictionary is O(n) time complexity.
Because here we have to visit each element of dictionary.

return "The values does not exist : - O(1) time complexity

Total : - O(1) + O(1) + O(n) + O(1) = O(n).

Space Complexity:-

Space complexity will be O(1) because here an extra memory not needed to
perform this operation.

# Delete / Remove an element from a Dictionary
"""

"""

There are various way of deleting an element from a Dictionary.

1st is we can use DEL statement, followed by the dictionary and the key.

"""

my_dict = {"Name":"Maya","Age": 64, "Address":"India","work":"House wife"}

print(my_dict)

del my_dict["Age"]

print(" ")

print(my_dict)

"""

Now the time complexity for deleting an element using del statement is O(1).
Because it involves hash table operation.

Space complexity is also O(1) because it does not create any additional data
structure for implementing this operation.


"""

"""

Another way to remove a key value pair from a dictionary is a pop method

This method also return the value assciated with the key. If the key is not
found , it returns a default value that is provided. Otherwise it's going
to raise key error.

"""


my_dict = {"Name":"Maya","Age": 64, "Address":"India","work":"House wife"}

print(my_dict)

print(" ")

remove_value = my_dict.pop('Name')

print(remove_value)
print(" ")
print(my_dict)

"""

Now the time complexity for pop method  is O(1).
Because it involves hash table operation.

Space complexity is also O(1) because it does not create any additional data
structure for implementing this operation.

"""

# pop item method



my_dict = {"Name":"Maya","Age": 64, "Address":"India","work":"House wife"}

print(my_dict)

print(" ")

remove_value = my_dict.popitem()

print(remove_value)
print(" ")

print(my_dict)

"""

In case of pop method it was returning only valye and but in
popitem method it returns key and value.

Time Complexity : - O(1)

Space Complexity : - O(1)

"""

"""
clear method to remove elements

Clear method removes all key value pairs from the dictinary leaving it empty


"""


my_dict = {"Name":"Maya","Age": 64, "Address":"India","work":"House wife"}

print(my_dict)

my_dict.clear()

print( " ")

print(my_dict)

"""

Time complexity : - O(n)

Where n is the number of elements in the dictionary because it has to
remove all elements from the dictionary

Space complexity : - O(1)

Because in this case additional structure is not created in the memory.

"""

"""# Dictionary Methods"""

my_dict = {"Name":"Maya","Age": 64, "Address":"India","work":"House wife"}

print(my_dict)

print(" ")

# clear() method

 # deletes all elements from the dictionary

my_dict.clear()
print(my_dict)

my_dict = {"Name":"Maya","Age": 64, "Address":"India","work":"House wife"}
my_dict

# copy() method

# return the copy of the dictionary

dict_copy= my_dict.copy()
print(dict_copy)

my_dict = {"Name":"Maya","Age": 64, "Address":"India","work":"House wife"}
my_dict



# fromkeys() method

# The fromkeys method creates a new dictionary from given sequence of elements
# with value provided by user.

dict_key = {}.fromkeys([1,2,3,4,5],0)

print(dict_key)

print(" ")

dict_keys = my_dict.fromkeys(["Son"],"Malav")
print(dict_keys)

print(" ")

print(my_dict)

# get() method

# The get() method return the value for specified key if the
# key is the dictionary.

# The first parameter is key, which is the key to be searched
# in the dictionary, and the second parameter and this one is
# optional. This is the value to be returned if the key is not
# found, the default valuy for the this second parameter is None.

# so the function returns the valye for the specified key
# if the key is in the dictionary.

# But if key is not in the dictionary and the value is not
# specified as a second parameter, then it will retune None.

# if key is not specified and the value is specified
# it will return the value which is specified in the second
# parameter.

get_dict= my_dict.get("Age",64)
print(get_dict)

print(" ")

get_dict= my_dict.get("Daughter",)
print(get_dict)

print(" ")

get_dict= my_dict.get("",25)
print(get_dict)

# items() method

# The items() method returns a view object that displays
# a list of dictionaries, key value tuple pairs.

# The method does not take any parameter and it will return a view
# object that displays a list of given dictionaries, key value
# tuple pair

my_dict = {"Name":"Maya","Age": 64, "Address":"India","work":"House wife"}
print(my_dict)

print(" ")

print(my_dict.items())

# keys() method

# The keys method returns a view object that displays the least of all
# keys in the dictionary.

# It justs returns a view object that display a list of keys.
# when dicionaries change the view object also reflected this change.

# it will return keys name only.

print(my_dict.keys())

# popitem() method

# Popitem method return and removes an arbitrary element from the
# dictionary.
my_dict = {"Name":"Maya","Age": 64, "Address":"India","work":"House wife"}
print(my_dict)

print(" ")

print(my_dict.popitem())

print(" ")

print(my_dict)

# setdefault()

# The setdefault method return the value of key if
# key is in the dictionary.

# if not, it inserts key with a value to the dictionary.

my_dict = {"Name":"Maya","Age": 64, "Address":"India","work":"House wife"}
print(my_dict)

print(" ")

print(my_dict.setdefault("Name","Malav"))

print(" ")

my_dict.setdefault("Son","Malav")

print(my_dict)

# pop method

# The pop method removes and returns an element from the dictionary
# having the given key

print(my_dict.pop("Son","Malav"))

print("")
print(my_dict)

# values() method

# The values method returns a view object that display a list of values
# in the dictionry


my_dict = {"Name":"Maya","Age": 64, "Address":"India","work":"House wife"}
print(my_dict)

print(" ")

print(my_dict.values())

# update() method

# The Update method updates the dictionary with the elements
# from another dictionary object or from an iterable
# of key value pairs

# This method adds elements to the dictionary if the key is
# not in the dictionary.

# If the key is in the dictionary, it updates the key value
# with new value

my_dict = {"Name":"Maya","Age": 64, "Address":"India","work":"House wife"}
print(my_dict)

print(" ")

new_dict = {"Daughter":"Gopi"}

my_dict.update(new_dict)

print(my_dict)

print(" ")

new_dict = {"Work":"Business"}

my_dict.update(new_dict)

print(my_dict)

"""# Dictionary Operations/ Built in FUnctions"""

my_dict = {

    0 : "Zero",
    1 : "One",
    2 : "Two",
    3 : "Three",
    4 : "Five",

}
my_dict

print(3 in my_dict)

print(" ")

print("One" in my_dict)

print("")

print(1 in my_dict)

# in method is only for keys not for values
# if we try to check whether element is in the dictionary or not
# using value it will return False always.

# to find element using values in the dictionary
# we can use values() method in the dictionary

print("One" in my_dict.values())

# len() function
# It takes each pair as one element



print(len(my_dict))

# all()
my_dict = {

    1 : "One",
    2 : "Two",
    3 : "Three",
    4 : "Five",
    5 : "Five"

}
my_dict

print(all(my_dict))

# If all keys in dictionary are true in this case it's true.
# So true means that if you have Boolean values in dictionary,
# the key have to be true.
# And the numbers or string except zero , because if we have zero
# in the dictionary this means that one of these key is false.
# So it will return false.

print(" ")

my_dict = {

    0 : "Zero",
    1 : "One",
    2 : "Two",
    3 : "Three",
    4 : "Five",
    5 : "Five"

}
my_dict

print(all(my_dict))

# any()

# In this function if any value is True it will return True.

# All Keys are True :- True
# All Keys are False :- False
# One Keys are True :- True

my_dict = {

    0 : "Zero",
    1 : "One",
    2 : "Two",
    3 : "Three",
    4 : "Five",
    5 : "Five"

}
my_dict

print(any(my_dict))

# sorted () function

# It will return the list of key in sorted order

my_dict = {

    4 : "Zero",
    2 : "One",
    3 : "Two",
    1 : "Three",
    4 : "Five",
    5 : "Five"

}
my_dict

print(sorted(my_dict))

"""# Dictionary Comprehension"""

# Syntax

# new_dict = {new_key:new_value  for item in list}

# new_dict = {new_key:new_value for (key,value) in dict.items() if condition}

cars = ["Urus","G-Wagon","BMW","AUDI"]

cars

import random

new_dict = {car_name:random.randint(20,30) for car_name in cars}

print(new_dict)

# create a dictionary from dictionary


new_dict = {car_name:random.randint(20,25) for car_name in cars}

print(new_dict)

print(" ")

car_dict = {car:price for (car,price)  in new_dict.items() if price>22}
print(car_dict)

"""# Dictionary vs. List

Dictinary : -

1.) Unordered
2.) Access via keys
3.) Collections of key value pairs
4.) Preferred when you have unique key values
5.) No duplicate members


List:-

1.) Ordered
2.) Access via index
3.) Collection of elements
4.) Preferred when you have ordered date
5.) Allow duplicate members

# Time and Space Complexity of a Dictionary

1.) Creating a Dictionary

Time Complexity :- O(len(dict))
Space Complexity :- O(n)


2.) Inserting a value in a Dictionary

Time Complexity :- O(1) or O(n)
Space Complexity :- O(1)

3.) Traversing a given Dictionary

Time Complexity :- O(n)
Space Complexity :- O(1)

4.) Accessing a given cell

Time Complexity :- O(1)
Space Complexity :- O(1)

5.) Searching a given value

Time Complexity :- O(n)
Space Complexity :- O(1)

6.) Deleting a given value

Time Complexity :- O(1)
Space Complexity :- O(1)
"""